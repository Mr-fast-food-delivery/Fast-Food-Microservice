{"ast":null,"code":"var _jsxFileName = \"D:\\\\SGU(1)\\\\official\\\\4-1\\\\KTPM\\\\testfood\\\\food-ordering-app\\\\frontend\\\\src\\\\components\\\\payment\\\\Payment.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport ApiService from '../../services/ApiService';\nimport { useError } from '../common/ErrorDisplay';\n\n// Load Stripe with your publishable key\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stripeInstance = loadStripe('pk_test_51QUUt8HB3OLSUETB41PkCNVZvXQdjyIJx4n7u9EHrMUH0j3R5VAJE76l1fnwQbC3OJlkPwQDIi0KwXGjdU1phB3s00ZJEZOlbv');\nconst PaymentForm = ({\n  amount,\n  orderId,\n  onSuccess\n}) => {\n  _s();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [loading, setLoading] = useState(false);\n  const {\n    ErrorDisplay,\n    showError\n  } = useError();\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!stripe || !elements) {\n      return;\n    }\n    setLoading(true);\n    try {\n      // Step 1: Initialize payment i.e Generate transaction ID from backend\n      const body = {\n        amount: amount,\n        orderId: orderId\n      };\n      const paymentInitilizeResponse = await ApiService.proceedForPayment(body);\n      if (paymentInitilizeResponse.statusCode !== 200) {\n        throw new Error(paymentInitilizeResponse.message || 'Failed to initialize payment');\n      }\n      const uniqueTransactionId = paymentInitilizeResponse.data;\n\n      // Step 2: Confirm payment with Stripe\n      const {\n        error: stripeError,\n        paymentIntent\n      } = await stripe.confirmCardPayment(uniqueTransactionId, {\n        payment_method: {\n          card: elements.getElement(CardElement),\n          billing_details: {\n            // Add any additional billing details you want\n          }\n        }\n      });\n      if (stripeError) {\n        throw stripeError;\n      }\n      if (paymentIntent.status === 'succeeded') {\n        console.log(\"PAYMENT IS SUCCESSDED\");\n\n        // Step 3: Update backend with payment completion\n        const res = await ApiService.updateOrderPayment({\n          orderId,\n          amount,\n          transactionId: paymentIntent.id,\n          success: true\n        });\n        onSuccess(paymentIntent);\n      } else {\n        // Step 3: Update backend with payment completion\n        const res = await ApiService.updateOrderPayment({\n          orderId,\n          amount,\n          transactionId: paymentIntent.id,\n          success: false\n        });\n      }\n    } catch (error) {\n      console.log(\"Payment Error: \" + error);\n      showError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"payment-form\",\n    children: [/*#__PURE__*/_jsxDEV(ErrorDisplay, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: /*#__PURE__*/_jsxDEV(CardElement, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      disabled: !stripe || loading,\n      className: \"pay-button\",\n      children: loading ? 'Processing...' : `Pay $${amount}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n_s(PaymentForm, \"BCKVPC5jeYNKQbhYmxzeb8hb7n8=\", false, function () {\n  return [useStripe, useElements, useError];\n});\n_c = PaymentForm;\nconst Payment = ({\n  amount,\n  orderId,\n  onSuccess\n}) => {\n  console.log(\"Amount to pay in usd: \" + amount);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Complete Payment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Elements, {\n      stripe: stripeInstance,\n      children: /*#__PURE__*/_jsxDEV(PaymentForm, {\n        amount: amount,\n        orderId: orderId,\n        onSuccess: onSuccess\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n};\n_c2 = Payment;\nexport default Payment;\nvar _c, _c2;\n$RefreshReg$(_c, \"PaymentForm\");\n$RefreshReg$(_c2, \"Payment\");","map":{"version":3,"names":["useState","loadStripe","Elements","CardElement","useStripe","useElements","ApiService","useError","jsxDEV","_jsxDEV","stripeInstance","PaymentForm","amount","orderId","onSuccess","_s","stripe","elements","loading","setLoading","ErrorDisplay","showError","handleSubmit","event","preventDefault","body","paymentInitilizeResponse","proceedForPayment","statusCode","Error","message","uniqueTransactionId","data","error","stripeError","paymentIntent","confirmCardPayment","payment_method","card","getElement","billing_details","status","console","log","res","updateOrderPayment","transactionId","id","success","onSubmit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","disabled","_c","Payment","_c2","$RefreshReg$"],"sources":["D:/SGU(1)/official/4-1/KTPM/testfood/food-ordering-app/frontend/src/components/payment/Payment.jsx"],"sourcesContent":["\r\nimport { useState } from \"react\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport { Elements, CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\r\nimport ApiService from '../../services/ApiService';\r\nimport { useError } from '../common/ErrorDisplay';\r\n\r\n\r\n// Load Stripe with your publishable key\r\nconst stripeInstance = loadStripe('pk_test_51QUUt8HB3OLSUETB41PkCNVZvXQdjyIJx4n7u9EHrMUH0j3R5VAJE76l1fnwQbC3OJlkPwQDIi0KwXGjdU1phB3s00ZJEZOlbv')\r\n\r\n\r\nconst PaymentForm = ({ amount, orderId, onSuccess }) => {\r\n\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const { ErrorDisplay, showError } = useError();\r\n\r\n    const handleSubmit = async (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        if (!stripe || !elements) {\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n\r\n            // Step 1: Initialize payment i.e Generate transaction ID from backend\r\n            const body = {\r\n                amount: amount,\r\n                orderId: orderId\r\n            }\r\n            const paymentInitilizeResponse = await ApiService.proceedForPayment(body);\r\n\r\n            if (paymentInitilizeResponse.statusCode !== 200) {\r\n\r\n                throw new Error(paymentInitilizeResponse.message || 'Failed to initialize payment');\r\n            }\r\n\r\n            const uniqueTransactionId = paymentInitilizeResponse.data;\r\n\r\n\r\n            // Step 2: Confirm payment with Stripe\r\n            const { error: stripeError, paymentIntent } = await stripe.confirmCardPayment(uniqueTransactionId, {\r\n\r\n                payment_method: {\r\n                    card: elements.getElement(CardElement),\r\n                    billing_details: {\r\n                        // Add any additional billing details you want\r\n                    }\r\n                }\r\n            });\r\n\r\n            if (stripeError) {\r\n                throw stripeError;\r\n            }\r\n\r\n            if (paymentIntent.status === 'succeeded') {\r\n                console.log(\"PAYMENT IS SUCCESSDED\")\r\n\r\n                // Step 3: Update backend with payment completion\r\n                const res = await ApiService.updateOrderPayment({\r\n                    orderId,\r\n                    amount,\r\n                    transactionId: paymentIntent.id,\r\n                    success: true\r\n                });\r\n\r\n\r\n                onSuccess(paymentIntent)\r\n\r\n            } else {\r\n\r\n                 // Step 3: Update backend with payment completion\r\n                const res = await ApiService.updateOrderPayment({\r\n                    orderId,\r\n                    amount,\r\n                    transactionId: paymentIntent.id,\r\n                    success: false\r\n                });\r\n\r\n\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            console.log(\"Payment Error: \" + error)\r\n            showError(error.message);\r\n        } finally {\r\n            setLoading(false)\r\n        }\r\n\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={handleSubmit} className=\"payment-form\">\r\n\r\n            <ErrorDisplay/>\r\n            <div className=\"form-group\">\r\n                <CardElement/>\r\n            </div>\r\n\r\n            <button type=\"submit\" disabled={!stripe || loading } className=\"pay-button\">\r\n                {loading ? 'Processing...' : `Pay $${amount}`}\r\n            </button>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Payment = ({ amount, orderId, onSuccess }) => {\r\n\r\n    console.log(\"Amount to pay in usd: \" + amount)\r\n\r\n    return (\r\n        <div className=\"payment-container\">\r\n            <h2>Complete Payment</h2>\r\n            <Elements stripe={stripeInstance}>\r\n                <PaymentForm amount={amount} orderId={orderId} onSuccess={onSuccess} />\r\n            </Elements>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Payment;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}